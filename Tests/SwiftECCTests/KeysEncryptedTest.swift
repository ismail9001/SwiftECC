//
//  KeysEncryptedTest.swift
//  SwiftECCTests
//
//  Created by Leif Ibsen on 25/03/2022.
//

import XCTest
@testable import SwiftECC
import BInt

class KeysEncryptedTest: XCTestCase {

    struct test {

        let curve: ECCurve
        let s: BInt
        let password: String
        let pem: String

        init(curve: ECCurve, s: BInt, password: String, pem: String) {
            self.curve = curve
            self.s = s
            self.password = password
            self.pem = pem
        }
    }
    
    // Test vectors generated by OpenSSL
    let tests: [test] = [

        // AES-128-CBC

        test(curve: .EC256r1, s: BInt("00fb1c65006e7883dabfa1fc481e0785a2cc90a311d334feba006ee371df90ba94", radix: 16)!, password: "abcd", pem:
"""
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIHeMEkGCSqGSIb3DQEFDTA8MBsGCSqGSIb3DQEFDDAOBAgf8bK5JkQjEgICCAAw
HQYJYIZIAWUDBAECBBA4X7WkIy/xo1lflJSoFGbcBIGQcY4ApL6/2EorD8q+c9GM
3OTj62dOn+Kx9zv4rwDGWJdc9XyeIp0gi0l89GRCQpGMzQFMVhQY7onsavzdiuKa
Yaf3g+zB3Qpl9z4NEImhDFumKgwJ6iPkMfpoWHetALjNFnaMa2IhpSjCjOX5jtKh
YafVNAH2i8dXwrnfr+MuVp5N3U+Zhqo7RhbEhbSzAv2I
-----END ENCRYPTED PRIVATE KEY-----
"""
            ),

        // AES-192-CBC

        test(curve: .EC256r1, s: BInt("03c6cfa396639e6fd3e7efa123fbdbce5447bf025f461d355862d5802d9883a4", radix: 16)!, password: "abcd", pem:
"""
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIHeMEkGCSqGSIb3DQEFDTA8MBsGCSqGSIb3DQEFDDAOBAix+xEHt2h9ZQICCAAw
HQYJYIZIAWUDBAEWBBBv50LDBM0g0qJf820MKfhDBIGQJk4NChLwm5b3ZE+IHMtQ
PaJHQMHA+OcMBstlq0PbC9I76qZC07a0jH8/LYVvuWcB6xPHP5n9a3LmzpeEvg8R
8AFhm/uEuB16KnGf5xBVLlu/zc4vHYLFLgC4FfNhJ+mCYq7oWiQl9mhO8lIFfnB2
gt6bONbJNsFgii77iyD+zTxZyR8+XIhx7A/r8h/NBoaE
-----END ENCRYPTED PRIVATE KEY-----
"""
            ),

        // AES-256-CBC

        test(curve: .EC256r1, s: BInt("5787f2632e1d6e21ac3430b738be1a29b5ad7f2a97bccdbf63406b068bdc616a", radix: 16)!, password: "abcd", pem:
"""
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIHeMEkGCSqGSIb3DQEFDTA8MBsGCSqGSIb3DQEFDDAOBAhP7OenCjWEcwICCAAw
HQYJYIZIAWUDBAEqBBBVQfJvAtxhz2VDGh3XDoRTBIGQ95hGvIDwSS4wDEbywE/u
QlvCMm0yyk15LQMP1UYH39VZUayatCzuG9KJmizkAQEBfNVxfrXTlTDnItfAvmlm
Pl9Cr5Vyj1xS0xCiP8GFfB12IGLgVXpU6Jy3Y1f/aZCaezYeSi1dWMH9GxuOqThf
J3i+EhfYbcv/StLF8gGKF2xdjIQ6CJeXZiHc0T36RzMk
-----END ENCRYPTED PRIVATE KEY-----
"""
            ),
        
        // AES-128-CBC

        test(curve: .EC571r1, s: BInt("02d8f2a97d1f850086f98cf8833d7c7b52d8ab874d028e8b1c33b944282e51cea8dc77c85f26f10d83a131262dea2d36ba2aa85efa511f6e8c9ec495f152139deb9b50d44ecd9653", radix: 16)!, password: "abcd", pem:
"""
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIBXzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQI4vePH1n2+vACAggA
MB0GCWCGSAFlAwQBAgQQ4/o/FpeW5SAd0SUiKPYqbwSCARCMUNwGC1osAMm/xUPm
SYuvjsqaeRrqoX0cOyfckmbtFzNSaPDsJ1Rckse50wS2K8DDd08LdrUMpN2LKQwg
wAeVkr3axmcyooMGDqCAu05bNUqsJmoIL4vcnVrkTgGC5teCEkUvyjfPIVQv8eiH
SIN1T3UclCShtFVMTuTx1hLcZZLzvnykwmsdgjQhjqjpGUMTlMHQALqB7YOKhTH7
55+Z5L6vrYNYInREquGgzCAZtbkpdBlMg6NE1F04w00g/mZnfnCaY15T1SLDaGfJ
cNouc1mX61fSmYN7MvZhbrv4uxs7utqj5IjCabnsYLggZR+4y9S5PIw3lXNv2pBt
v0lyhAWLZPOdt5dmAHgfRdyfAg==
-----END ENCRYPTED PRIVATE KEY-----
"""
            ),

        // AES-192-CBC

        test(curve: .EC571r1, s: BInt("783daba773bf49aa8add239f74f35b775dfd2a0bdc966a51a6c99bd6a4cc88ddde2cbed10eade37d9c61fe0b12fb40a6c903ca9f310de3f5f25e28402f5918d36bc0189c3097a7", radix: 16)!, password: "abcd", pem:
"""
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIBXzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQI2rTggqTt7FkCAggA
MB0GCWCGSAFlAwQBFgQQgvFOj+vDtCA+oRUxeiPIEASCARD6eTud6YAfEfod2X2A
iprLfeFKC+COdZwfb+KtK7Qn1MIgQBYI+3CcjPexStn9XF+5rzUz1BVmNdorpS5s
S/GjYcSER7DCvgZYYxEB6n6rW1hH5qkTrHDpBC+86+k26WsMFPRi84qNaeU+aQrn
xwSPaiJNu9GWFddSzvxcK/LbhdgT3mCmv+8jULDWlWq1gJ1DojJF7/48KLDGnUoy
8H/I1BiafvcGngl73OA1TLhey+13V8UdWzWh7/+UAUyu+37di1B1DrhtaO67nljq
LOuF4id5+Y+2GWazzAHS/scugiLvcc53D7pM9SFLjz5JhF1Xb2+TCiTxtIzXoqqa
1qBob8r9Tsj32S3sdLmB+XdQ+w==
-----END ENCRYPTED PRIVATE KEY-----
"""
            ),

        // AES-256-CBC

        test(curve: .EC571r1, s: BInt("00cad8582a7a60d82b95fb7eeb3b7c5eaee68c2d374757d39563cb6ee307384650477a5139a60d53dafe1e357ccbcb45c0e5d554b6fc29e457bc696766f0e47575e01b2e217a6980", radix: 16)!, password: "abcd", pem:
"""
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIBXzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQIDkYqwpZa2F8CAggA
MB0GCWCGSAFlAwQBKgQQRhdHy9fbYHWF4WN5S/ydGASCARCu9zdN/rO5r9cZ0+DH
GcKq1r2H2GebAKVzQv1BNTwCRPSJx4EKe1o33O+Hg32kQf1kKDdxOrVcnyacyuGB
mD1YIgsdokkTMMMsxfDUSkhGTv78ZOopvhU5dKSj+aYINbvmf21qlBv/5y72qn+t
prGAAscUMKksihCKHYB7iVxgUcV7HqCgaFyVpECUoarmXwUhAl2GXQtmCgml7otS
L0rSWIrOWVNQHtl1ZABg+Xq0PWiClgEiI6Pz5DtJFkFdU3rnK5fl2prbvLGUPsC2
jwXj93sh1CLoXBjQq1Iy9OXt7vdMR2pkSoVJxbK6ueTWcHqCGMlLJ8PAeVu/4LZ+
Gh6qQP+BwjlBXSbQ0HpXIhI7Dg==
-----END ENCRYPTED PRIVATE KEY-----
"""
            ),
    ]

    func doTest1(_ c: ECCurve, _ pw: Bytes, _ cipher: AESCipher) throws {
        let domain = Domain.instance(curve: c)
        let (_, privKey) = domain.makeKeyPair()
        let encrypted = privKey.pemEncrypted(password: pw, cipher: cipher)
        let privKey1 = try ECPrivateKey(pem: encrypted, password: pw)
        XCTAssertEqual(privKey.domain.name, privKey1.domain.name)
        XCTAssertEqual(privKey.s, privKey1.s)
    }

    func test1() throws {
        for c in ECCurve.allCases {
            try doTest1(c, [], .AES128)
            try doTest1(c, [], .AES192)
            try doTest1(c, [], .AES256)
            try doTest1(c, [17], .AES128)
            try doTest1(c, [17], .AES192)
            try doTest1(c, [17], .AES256)
            try doTest1(c, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], .AES128)
            try doTest1(c, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], .AES192)
            try doTest1(c, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], .AES256)
            try doTest1(c, Bytes(repeating: 17, count: 1000), .AES128)
            try doTest1(c, Bytes(repeating: 17, count: 1000), .AES192)
            try doTest1(c, Bytes(repeating: 17, count: 1000), .AES256)
        }
    }

    func test2() throws {
        for t in tests {
            let key = try ECPrivateKey(pem: t.pem, password: Bytes(t.password.utf8))
            XCTAssertEqual(key.domain.name, Domain.instance(curve: t.curve).name)
            XCTAssertEqual(key.s, t.s)
        }
    }


}
